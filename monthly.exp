#!/usr/bin/expect --
set timeout -1

proc color {foreground text} {
    return [exec tput setaf $foreground]$text[exec tput sgr0]
}

set env(USER)
set command "<insert command>"
set list [lindex $argv 0]

        if {[string trim $list] eq ""} {

                send_user "\n[color 5 {Monthly Expect:: }][color 1 {(FAILURE)}] provide argument for list which must be in the form:\n"
                send_user "\n[color 5 {Monthly Expect:: }][color 2 {$ ./monthly_expect.exp list}] or [color 2 {$ expect monthly_expect.exp list}] ... \n"
                send_user "\n[color 5 {Monthly Expect:: }]where [color 2 {list}] is a list of servers in a single row format in a plain text file ... \n"
                send_user "\n"
                exit 1

        } else {
}



        if {[string trim $env(USER)] eq "root"} {

                send_user "\n"
                send_user "\n[color 5 {Monthly Expect:: }]must not be logged in as root ... [color 1 {(FAILURE)}]\n"
                send_user "\n"
                exit 1

        } else {
                send_user "\n"
                send_user "\n[color 5 {Monthly Expect:: }]welcome to monthly expect ... [color 2 {(OK)}]\n"
                send_user "\n"
}


stty -echo
send_user -- "\n[color 5 {Monthly Expect::Phase 1/2:: }]enter your password ... [color 1 {(WAIT)}]\n"
expect_user -re "(.*)\n"
stty echo

set pass $expect_out(1,string)
send_user "\n[color 5 {Monthly Expect::Phase 1/2:: }]password collected continuing ... [color 2 {(OK)}]\n"
send_user "\n"

send_user -- "\n[color 5 {Monthly Expect::Phase 2/2:: }]validating list name ... [color 2 {(OK)}]\n"
send_user "\n[color 5 {Monthly Expect::Phase 2/2:: }]checks completed moving on ... [color 2 {(OK)}]\n"
send_user "\n"

if {![file exists /home/$env(USER)/.ssh/known_hosts]} {

        send_user "\n"
        send_user "\n[color 5 {Monthly Expect:: }]ssh known_host file not found importing keys from list ... [color 1 {(FAILURE)}]\n"
        send_user "\n"

        set path [pwd]
        set x [open "$path/$list"]
        set hosts [split [read $x] "\n"]
        close $x

        foreach x $hosts {

                if {[string trim $x] eq ""} then break
                        spawn ssh $env(USER)@$x
                        expect -- "can't be established."
                        send -- "yes\r"
                        expect "password:"

                         }



} else {

        send_user "\n"
        send_user "\n[color 5 {Monthly Expect:: }]ssh known_host file found ... [color 2 {(OK)}]\n"
        send_user "\n"
}


set path [pwd]
set x [open "$path/$list"]
set hosts [split [read $x] "\n"]
close $x

        foreach x $hosts {

                if {[string trim $x] eq ""} then break

                        spawn ssh $env(USER)@$x
                        expect "password:"
                        send_user "\n"
                        send_user "\n[color 5 {Monthly Expect:: }]logging in as $env(USER) on $x ... [color 2 {(OK)}]\n"
                        send -- "$pass\r"
                        expect "$env(USER)@"
                        send "/usr/bin/sudo su -\r"
                        expect " password for "
                        send_user "\n"
                        send_user "\n[color 5 {Monthly Expect:: }]logging in as root on $x ... [color 2 {(OK)}]\n"
                        send -- "$pass\r"
                        send_user "\n[color 5 {Monthly Expect:: }]running monthly report on $x ... [color 2 {(OK)}]\n"
                        sleep 1
                        send "$command\r"
                        interact -o "<REGULAR EXPRESSION PHRASE>" return
                        send_user "\n"
                        send_user "\n[color 5 {Monthly Expect:: }]finished with $x moving onto the next ... [color 2 {(OK)}]\n"
                        close
                }

send_user "\n[color 5 {Monthly Expect:: }]end of the list all finished ... [color 2 {(OK)}]\n"
send_user "\n[color 5 {Monthly Expect:: }]exiting application ... [color 2 {(OK)}]\n"
send_user "\n"
